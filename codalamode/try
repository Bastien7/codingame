import CaseType.*
import Item.*
import Preparation.*
import java.util.*
import kotlin.random.Random
import kotlin.system.measureTimeMillis


fun debug(value: Any?) = System.err.println(value)

val INITIAL_POSITION = Point(-1, -1)

data class Point(val x: Int, val y: Int) {
    fun distanceTo(other: Point) = Math.abs(this.x - other.x) + Math.abs(this.y - other.y)
    fun isAdjacent(point: Point) = Math.abs(this.x - point.x) <= 1 && Math.abs(this.y - point.y) <= 1

    val left get() = Point(this.x - 1, this.y)
    val right get() = Point(this.x + 1, this.y)
    val up get() = Point(this.x, this.y + 1)
    val down get() = Point(this.x, this.y - 1)
}


/**
 *
 * PLAYER/ITEM
 *
 */
open class Player(var position: Point = INITIAL_POSITION, var items: List<Item> = listOf()) {
    open fun update(input: Scanner) {
        this.position = Point(input.nextInt(), input.nextInt())
        this.items = input.readItems()
    }
}

enum class Item(val complexity: Int, val preparation: Preparation? = null, val caseProvider: CaseType? = null) {
    DISH(1, null, DISHWASHER),
    BLUEBERRIES(1, null, BLUEBERRIES_CRATE),
    ICE_CREAM(1, null, ICE_CREAMER),
    STRAWBERRIES(1, null, STRAWBERRIES_CRATE),
    DOUGH(1, null, DOUGH_CRATE),
    CHOPPED_STRAWBERRIES(2, PREPARATION_CHOPPED_STRAW, null),
    CROISSANT(3, PREPARATION_CROISSANT, null),
    CHOPPED_DOUGH(2, null),
    RAW_TART(3, null),
    TART(5, PREPARATION_TART, null);
}

enum class Preparation(val steps: List<CaseType>) {
    PREPARATION_CROISSANT(listOf(DOUGH_CRATE, OVEN, OVEN)),
    PREPARATION_CHOPPED_STRAW(listOf(STRAWBERRIES_CRATE, CHOPPING_BOARD)),
    PREPARATION_TART(listOf(DOUGH_CRATE, CHOPPING_BOARD, BLUEBERRIES_CRATE, OVEN, OVEN))
}


data class Customer(val recipe: List<Item>, val award: Int) {
    fun getAwardOnComplexity() = award.toDouble() / recipe.sumBy { it.complexity }.toDouble()
}


/**
 *
 * WORLD/MAP
 *
 */
data class Table(val case: Case, val items: List<Item>)

enum class CaseType(val caseChar: Char) {
    BLUEBERRIES_CRATE('B'),
    STRAWBERRIES_CRATE('S'),
    ICE_CREAMER('I'),
    DOUGH_CRATE('H'),
    DISHWASHER('D'),
    CHOPPING_BOARD('C'),
    WORK_TABLE('#'),
    OVEN('O'),
    CUSTOMER_BELL('W'),
    EMPTY('.')
}

fun fromChar(char: Char) = CaseType.values().firstOrNull { it.caseChar == char } ?: EMPTY//error("what the char $char")

data class Case(val position: Point, val type: CaseType)
data class Game(
    val map: List<List<Case>>,
    val customers: List<Customer>,
    var partner: Player = Player(),
    var waitingCustomers: List<Customer> = listOf(),
    private var tables: List<Table> = listOf(),
    var tableItemsAvailables: Map<Item, List<Table>> = hashMapOf(),
    private val casesFlatten: List<Case> = map.flatten(),
    val usefulCases: Map<CaseType, Case> = (CaseType.values().toList() - EMPTY).associate { it to findCase(casesFlatten, it) },
    var ovenContents: List<Item> = listOf(),
    var ovenTimer: Int = 0
) {
    companion object {
        private fun findCase(casesFlatten: List<Case>, caseType: CaseType) = casesFlatten.first { it.type == caseType }
    }

    fun get(x: Int, y: Int) = map[y][x]
    fun get(point: Point) = get(point.x, point.y)
    fun getEmptyTable(player: Player) = (-1..1).flatMap { y -> (-1..1).map { x -> this.get(player.position.x + x, player.position.y + y) } }
        .filter { it.type == WORK_TABLE }
        .firstOrNull { case -> tables.none { it.case.position == case.position } }

    fun getRandomCase() = this.get(this.partner.position)

    fun getNearerItemOnTable(player: Player, item: Item) = this.tableItemsAvailables[item]?.minBy { it.case.position.distanceTo(player.position) }


    fun update(input: Scanner) {
        this.tables = (0 until input.nextInt()).map { Table(Case(Point(input.nextInt(), input.nextInt()), WORK_TABLE), input.readItems()) }
        this.tableItemsAvailables = this.tables.filter { table -> table.items.size == 1 && table.items.first().preparation != null }.groupBy { it.items.first() }
        /*tableItemsAvailables.forEach { pair ->
            pair.value.forEach { debug("${pair.key} on the table $it") }
        }*/

        this.ovenContents = input.readItems()
        this.ovenTimer = input.nextInt()

        this.waitingCustomers = (0 until input.nextInt()).map {
            val items = input.readItems().reversed()
            Customer(items, input.nextInt())
        }
    }

    val dishwasher get() = usefulCases.getValue(DISHWASHER)
    val blueberriesCrate get() = usefulCases.getValue(BLUEBERRIES_CRATE)
    val strawberriesCrate get() = usefulCases.getValue(STRAWBERRIES_CRATE)
    val doughCrate get() = usefulCases.getValue(DOUGH_CRATE)
    val choppingBoard get() = usefulCases.getValue(CHOPPING_BOARD)
    val iceCreamer get() = usefulCases.getValue(ICE_CREAMER)
    val oven get() = usefulCases.getValue(OVEN)
    val customerBell get() = usefulCases.getValue(CUSTOMER_BELL)
}

fun Scanner.readItems(): List<Item> {
    val line = this.next()

    if (line == "NONE") {
        return listOf()
    } else {
        return line.split("-").map { Item.valueOf(it) }.sortedBy { it.name }
    }
}

/**
 *
 * GAME LOGIC
 *
 */
fun Player.move(destination: Point) = println("MOVE ${destination.x} ${destination.y}")

fun Player.move(case: Case) = this.move(case.position)
fun Player.use(destination: Point) = println("USE ${destination.x} ${destination.y}")
fun Player.use(case: Case) = if (case.type == EMPTY) move(case) else this.use(case.position)
fun Player.wait() = println("WAIT")



fun Case.distanceTo(player: Player) = this.position.distanceTo(player.position)
fun Table.distanceTo(player: Player) = this.case.position.distanceTo(player.position)



fun main2(args: Array<String>) {
    val input = Scanner(System.`in`)

    val customers = (0 until input.nextInt()).map {
        val items = input.readItems()
        Customer(items, input.nextInt())
    }

    input.nextLine() //why?

    val cases = (0 until 7).map { y ->
        val kitchenLine = input.nextLine()
        debug(kitchenLine)
        kitchenLine.mapIndexed { x, char -> Case(Point(x, y), fromChar(char)) }
    }
    val game = Game(cases, customers)
    val player = Player()
    val partner = Player()
    game.partner = partner

    // game loop
    while (true) {
        val turnsRemaining = input.nextInt()
        player.update(input)
        partner.update(input)
        game.update(input)

        if (game.waitingCustomers.isNotEmpty()) {

        } else
            player.wait()
    }
}


fun main(args: Array<String>) {

    val map = listOf(
        listOf(WORK_TABLE, WORK_TABLE, WORK_TABLE, BLUEBERRIES_CRATE, WORK_TABLE, WORK_TABLE, WORK_TABLE, WORK_TABLE, WORK_TABLE, WORK_TABLE, WORK_TABLE),
        listOf(STRAWBERRIES_CRATE, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WORK_TABLE),
        listOf(WORK_TABLE, EMPTY, WORK_TABLE, WORK_TABLE, WORK_TABLE, WORK_TABLE, EMPTY, WORK_TABLE, WORK_TABLE, EMPTY, WORK_TABLE),
        listOf(OVEN, EMPTY, WORK_TABLE, EMPTY, EMPTY, WORK_TABLE, EMPTY, EMPTY, DOUGH_CRATE, EMPTY, ICE_CREAMER),
        listOf(CHOPPING_BOARD, EMPTY, WORK_TABLE, WORK_TABLE, EMPTY, WORK_TABLE, WORK_TABLE, WORK_TABLE, WORK_TABLE, EMPTY, DISHWASHER),
        listOf(WORK_TABLE, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, WORK_TABLE),
        listOf(WORK_TABLE, WORK_TABLE, WORK_TABLE, WORK_TABLE, WORK_TABLE, CUSTOMER_BELL, WORK_TABLE, WORK_TABLE, WORK_TABLE, WORK_TABLE, WORK_TABLE)
    ).mapIndexed { y, row -> row.mapIndexed { x, caseType -> Case(Point(x, y), caseType) } }

    val player = Simulator.Player(Point(1, 1))
    val partner = Simulator.Player()
    //val customer = Customer(listOf(TART, CROISSANT, DISH, ICE_CREAM, BLUEBERRIES), 12)
    val customer = Customer(listOf(DISH, ICE_CREAM, TART, CROISSANT, BLUEBERRIES), 12)
    val game = Simulator.Game(map, player, partner, listOf(customer))

    game.debug()

    val initialSteps = Simulator.initializeSteps(game, game.tables)
    debug(initialSteps)


    val time = measureTimeMillis {
        val stepsList = Simulator.generateManySteps(game, initialSteps, 100) //listOf(initialSteps + game.customerBell)
        debug("Generated genomes: ${stepsList.size}")
        val distinct = stepsList.distinct()
        debug("Distinct genomes:  ${distinct.size}")

        val results = distinct.map { it to Simulator.applySteps(game, game.player, game.tables, it) }
        results.forEach { debug("${it.second}: ${it.first.map { it.type }}") }
        val bestResult = results.minBy { it.second } ?: error("We should have a solution")
        val bestGenomes = results.filter { it.second == bestResult.second }

        debug("Result: ${bestResult.second} turns")
        debug(bestResult.first.map { it.type})
    }
    debug("$time ms")
}


/**
 *
 *
 * GAME SIMULATOR
 *
 *
 */
object Simulator {
    data class Player(var position: Point = Point(0, 0), val items: MutableList<Item> = mutableListOf())
    data class Oven(var content: Item? = null, var timeRemaining: Int = 0)

    data class Game(
        val map: List<List<Case>>,
        val player: Player = Player(),
        var partner: Player = Player(),
        var waitingCustomers: List<Customer> = listOf(),
        var tables: List<Table> = listOf(),
        var tableItemsAvailables: Map<Item, List<Table>> = hashMapOf(),
        val usefulCases: Map<CaseType, Case> = (CaseType.values().toList() - EMPTY).associate { it to findCase(map.flatten(), it) },
        var ovenContent: Item? = null,
        var ovenTimer: Int = 0
    ) {
        companion object {
            private fun findCase(casesFlatten: List<Case>, caseType: CaseType) = casesFlatten.first { it.type == caseType }
        }

        fun get(x: Int, y: Int) = map[y][x]
        fun get(point: Point) = get(point.x, point.y)
        fun getEmptyTable(player: Player) = (-1..1).flatMap { y -> (-1..1).map { x -> this.get(player.position.x + x, player.position.y + y) } }
            .filter { it.type == WORK_TABLE }
            .firstOrNull { case -> tables.none { it.case.position == case.position } }


        val dishwasher get() = usefulCases.getValue(DISHWASHER)
        val blueberriesCrate get() = usefulCases.getValue(BLUEBERRIES_CRATE)
        val strawberriesCrate get() = usefulCases.getValue(STRAWBERRIES_CRATE)
        val doughCrate get() = usefulCases.getValue(DOUGH_CRATE)
        val choppingBoard get() = usefulCases.getValue(CHOPPING_BOARD)
        val iceCreamer get() = usefulCases.getValue(ICE_CREAMER)
        val oven get() = usefulCases.getValue(OVEN)
        val customerBell get() = usefulCases.getValue(CUSTOMER_BELL)


        fun debug() {
            map.forEach {
                it.forEach {
                    if (it.position == player.position)
                        System.err.print('0')
                    else if (it.position == partner.position)
                        System.err.print('1')
                    else
                        System.err.print(it.type.caseChar)
                }
                System.err.println()
            }
        }
    }

    private fun Player.isAdjacent(case: Case) = this.position.isAdjacent(case.position)


    private fun Player.dropItem(game: Game, tables: MutableList<Table>): ActionResult {
        val table = game.getEmptyTable(this)

        if(table == null) {
            return ActionResult.ERROR
        } else {
            //debug("Drop $items to the table at ${table.position}")
            val newTable = Table(table, this.items.toMutableList())
            tables.add(newTable)
            this.items.clear()
            return Simulator.ActionResult.DROP
        }
    }

    private fun use(player: Player, tables: MutableList<Table>, table: Table) {
        player.items.addAll(table.items)
        tables.remove(table)
    }

    private fun Player.replaceItem(item: Item): ActionResult {
        this.items.clear()
        this.items.add(item)
        return Simulator.ActionResult.USE
    }

    private fun Player.addItem(game: Game, tables: MutableList<Table>, item: Item): ActionResult {
        val containDish = this.items.contains(DISH)

        if ((item == DISH && !containDish) || (this.items.isEmpty() || containDish)) {
            this.items.add(item)
            return ActionResult.USE
        } else {
            return dropItem(game, tables)
        }
    }

    private fun useOven(oven: Oven, player: Player): ActionResult {
        val playerItem = player.items.firstOrNull()
        val hasOvenableItem = player.items.size == 1 && playerItem == DOUGH || playerItem == RAW_TART

        if(oven.content == null) {
            if(hasOvenableItem) {
                oven.content = playerItem
                oven.timeRemaining = 10
                player.items.clear()
                return ActionResult.USE
            } else {
                return ActionResult.ERROR
            }
        } else if(oven.content == CROISSANT || oven.content == TART) {
            if(playerItem == null) {
                player.items.add(oven.content!!)
                oven.content = null
                return ActionResult.USE
            } else {
                return ActionResult.ERROR
            }
        } else {
            return ActionResult.WAITING
        }
    }

    private fun useChoppingBoard(game: Game, player: Player, tables: MutableList<Table>): ActionResult {
        val currentItem = player.items.firstOrNull()

        if(player.items.size == 1) {
            if(currentItem == DOUGH) {
                return player.replaceItem(CHOPPED_DOUGH)
            } else if(currentItem == STRAWBERRIES) {
                return player.replaceItem(CHOPPED_STRAWBERRIES)
            } else {
                return player.dropItem(game, tables)
            }
        } else {
            return ActionResult.ERROR
        }
    }

    private fun use(game: Game, player: Player, oven: Oven, tables: MutableList<Table>, case: Case): ActionResult {
        val result = when (case.type) {
            BLUEBERRIES_CRATE -> if(player.items.firstOrNull() == CHOPPED_DOUGH) player.replaceItem(RAW_TART) else player.addItem(game, tables, BLUEBERRIES)
            ICE_CREAMER -> player.addItem(game, tables, ICE_CREAM)
            DISHWASHER -> player.addItem(game, tables, DISH)
            DOUGH_CRATE -> player.addItem(game, tables, DOUGH)
            CHOPPING_BOARD -> useChoppingBoard(game, player, tables)
            OVEN -> useOven(oven, player)
            CUSTOMER_BELL -> if (player.haveAllItems(game.waitingCustomers.first())) ActionResult.USE else ActionResult.ERROR
            EMPTY -> error("Cannot use 'EMPTY' case")
            WORK_TABLE -> {
                val table = tables.find { it.case == case }
                if (table != null) {
                    if(table.items.size > 1 && player.items.isNotEmpty() && !player.items.contains(DISH)) {
                        player.dropItem(game, tables)
                    } else {
                        player.addItem(game, tables, table.items.first())
                    }
                } else {
                    tables.add(Table(case, player.items.toMutableList()))
                    player.items.clear()
                    ActionResult.USE
                }
            }
            else -> error("No provider on the case $case")
        }

        //debug("use $case --> ${player.items}")
        return result
    }

    private fun move(game: Game, player: Player, case: Case, aggressiveMode: Boolean = true): Case {
        //debug("go from ${player.position} to ${case.position}")
        val path = PathFinder.findPath(game, player, case.position) ?: error("cannot find a path from $player to $case")

        if (path.isEmpty()) {
            error("take care, this move was unnecessary")
        } else {
            val index = if (path.size > 4) 3 else path.lastIndex

            if ((0..index).any { path[it].position == game.partner.position } && aggressiveMode) {
                return game.get(game.partner.position)
            } else {
                return path[index]
            }
        }
    }

    private fun moveOrUse(game: Game, player: Player, oven: Oven, tables: MutableList<Table>, case: Case): ActionResult {
        if (player.position.isAdjacent(case.position)) {
            return use(game, player, oven, tables, case)
        } else {
            player.position = move(game, player, case).position
            return ActionResult.MOVE
        }
    }

    enum class ActionResult {
        MOVE, USE, WAITING, DROP, GET_BACK_TABLE, ERROR
    }

    private fun deduceUsableCases(game: Game, player: Player, customer1: Customer, customer2: Customer, tables: List<Table>): List<Case> {
        if (player.haveAllItems(customer1)) {
            return listOf(game.customerBell)
        }

        val itemsToTake = customer1.recipe.filter { !player.items.contains(it) }// + customer2.recipe.filter { !player.items.contains(it) }
        val authorizedProviders = itemsToTake.filter { it.preparation == null }.map { game.usefulCases.getValue(it.caseProvider!!) }
        val tableCases = if (player.items.contains(DISH)) {
            tables.filter { !it.items.contains(DISH) }.map { it.case }
        } else {
            tables.map { it.case }
        }

        val emptyTable = game.getEmptyTable(player)

        return if (emptyTable != null) (authorizedProviders + tableCases + emptyTable) else (authorizedProviders + tableCases)
    }

    fun getSpecificCase(game: Game, caseType: CaseType): Case {
        return when(caseType) {
            DOUGH_CRATE -> game.doughCrate
            OVEN -> game.oven
            CHOPPING_BOARD -> game.choppingBoard
            STRAWBERRIES_CRATE -> game.strawberriesCrate
            BLUEBERRIES_CRATE -> game.blueberriesCrate
            else -> error("Why trying to get a case for this caseType? It's only for preparation normally...")
        }
    }

    fun initializeSteps(game: Game, tables: List<Table>): List<Case> {
        maxTurn = 200

        return game.waitingCustomers.first().recipe
            .sortedByDescending { if(it == TART) 3 else if(it == CROISSANT) 2 else if(it == DISH) 1 else 0 }
            .flatMap { item ->
            if (item.preparation == null) {
                listOf(game.usefulCases.getValue(item.caseProvider!!))
            } else {
                val tableWithItem = tables.find { it.items.firstOrNull() == item }
                if (tableWithItem == null) {
                    item.preparation.steps.map { getSpecificCase(game, it) }
                } else {
                    listOf(tableWithItem.case)
                }
            }
        }
    }

    fun generateManySteps(game: Game, initialSteps: List<Case>, genomeNumber: Int): List<List<Case>> {
        val customerBell = game.customerBell
        return (0 until genomeNumber).map { initialSteps.toMutableList().sortedBy { item -> Random.nextBoolean() } + customerBell }
    }

    fun Oven.update(): Boolean {
        if(this.timeRemaining > 0) {
            this.timeRemaining -= 2

            if(timeRemaining == 0) {
                this.content = when (this.content) {
                    DOUGH -> CROISSANT
                    RAW_TART -> TART
                    CROISSANT -> return false
                    TART -> return false
                    else -> error("Nothing else man")
                }
            }
        }

        return true
    }

    /*
    fun evolveGenomes(genomes: List<List<Case>>): List<List<Case>> {
        genomes[0].
    }*/

    var maxTurn: Int = 200


    fun applySteps(game: Game, player: Player, tables: List<Table>, orderedSteps: List<Case>): Int {
        val newTables = tables.toMutableList()
        val newPlayer = player.copy(items = player.items.toMutableList())
        val oven = Oven(game.ovenContent, game.ovenTimer)

        var turnCount = 0
        val waitingTablesMap: MutableMap<Int, MutableList<Table>> = mutableMapOf()

        orderedSteps.forEachIndexed { i, step ->
            val waitingTables = waitingTablesMap[i]

            do {
                val actionResult: ActionResult

                if(turnCount >= maxTurn) {
                    return Int.MAX_VALUE
                }

                if(waitingTables?.isNotEmpty() == true) {
                    val firstTable = waitingTables.first()
                    val tableActionResult = moveOrUse(game, newPlayer, oven, newTables, firstTable.case)

                    if(tableActionResult == ActionResult.USE) {
                        waitingTables.remove(firstTable)
                        actionResult = Simulator.ActionResult.GET_BACK_TABLE
                    } else {
                        actionResult = Simulator.ActionResult.MOVE
                    }
                } else {
                    actionResult = moveOrUse(game, newPlayer, oven, newTables, step)
                }

                if (actionResult == Simulator.ActionResult.ERROR) {
                    return Int.MAX_VALUE
                } else {
                    turnCount++
                    if(!oven.update()) {
                        return Int.MAX_VALUE
                    }
                }
                if(actionResult == Simulator.ActionResult.DROP) {
                    val newWaitingTable = newTables.last()
                    val bestIndex: Int = (Math.max(i, orderedSteps.indexOf(game.dishwasher)) until orderedSteps.size).minBy { orderedSteps[it].position.distanceTo(newWaitingTable.case.position) } ?: error("Don't know what to do :(")

                    val waitingTables = waitingTablesMap[bestIndex]
                    if(waitingTables == null) {
                        waitingTablesMap.put(bestIndex, mutableListOf(newWaitingTable))
                    } else {
                        waitingTables.add(newWaitingTable)
                    }
                }
            } while (actionResult != Simulator.ActionResult.USE)
        }

        if(turnCount < maxTurn) {
            maxTurn = turnCount
        }
        return turnCount
    }


    private fun Player.haveAllItems(customer: Customer): Boolean {
        return customer.recipe.all { this.items.contains(it) }
    }


    /**
     *
     *
     * PATH FINDER
     *
     *
     */
    object PathFinder {
        private data class Node(val case: Case, val cost: Int, val estimatedCost: Int, val previousNode: Node?)

        private fun getAdjacentCases(map: Game, case: Case): List<Case> {
            val position = case.position
            return listOf(map.get(position.left), map.get(position.right), map.get(position.down), map.get(position.up)).filter { it.type == EMPTY }
        }

        private fun getAdjacentNodes(map: Game, end: Point, openList: MutableList<Node>, closedList: MutableList<Node>, node: Node): MutableList<Node> {
            return getAdjacentCases(map, node.case)
                .filter { case -> openList.find { node -> node.case == case } == null }
                .filter { case -> closedList.find { node -> node.case == case } == null }
                .map { Node(it, node.cost + 1, it.position.distanceTo(end), node) }
                .toMutableList()
        }

        private fun extractPath(latestNode: Node): List<Case> {
            val path: MutableList<Case> = mutableListOf()
            var currentNode: Node = latestNode
            while (currentNode.previousNode != null) {
                path.add(currentNode.case)
                currentNode = currentNode.previousNode!!
            }
            return path
        }

        fun findPath(map: Game, start: Player, end: Point): List<Case>? = findPath(map, start.position, end)

        fun findPath(map: Game, start: Point, end: Point): List<Case>? {
            //if (start == end) return listOf()
            if (Math.abs(start.x - end.x) <= 1 && Math.abs(start.y - end.y) <= 1) return listOf() //TODO check that

            val closedList = mutableListOf<Node>()
            val firstNodes = getAdjacentNodes(map, end, mutableListOf(), closedList, Node(map.get(start), 0, start.distanceTo(end), null))

            return findPath(map, end, firstNodes, mutableListOf())?.reversed()
        }

        private fun findPath(map: Game, end: Point, openList: MutableList<Node>, closedList: MutableList<Node>): List<Case>? {
            var bestNode: Node? = null

            //while (bestNode?.estimatedCost != 0 && !openList.isEmpty()) {
            while (bestNode?.case?.position?.isAdjacent(end) != true && !openList.isEmpty()) {
                bestNode = openList.sortedBy { it.cost + it.estimatedCost }.firstOrNull()
                if (bestNode == null) {
                    return null
                }
                openList.remove(bestNode)
                closedList.add(bestNode)
                openList.addAll(getAdjacentNodes(map, end, openList, closedList, bestNode))
            }

            if (bestNode == null)
                return null
            else
                return extractPath(bestNode)
        }
    }
}
